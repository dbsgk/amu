package day01;
//한줄 주석
/*여러줄 주석*/
// 주석을 입력하는 이유는 해당 코드에 대한 설명을 적어주기 위해.

//이름규칙 1번: 패키지명은 소문자로 시작한다.
// 패키지란? 목적이 비슷한 클래스를 모아놓은 폴더.

//이름규칙 2번: 클래스명은 대문자로 시작한다.
//이름규칙 3번: 변수명은 소문자로 시작하는 명사.
//변수란? 값이 바뀌는 공간을 뜻한다.

//이름규칙 4번: 변수명은 낙타등 표기법(camelback notation)을 따른다.
// camelback notation? 여러 단어로 이뤄질 경우
//두번째 단어부터는 대문자로 표기하는 것을 말한다. ex) firstNumber

//이름규칙 5번: 변수의 이름은 숫자, 특수문자로 시작할 수 없다.
//이름규칙 6번: 변수의 이름에는 특수문자가 들어갈 수 없다.
//ex) 1Number, number★->안됨, number1->됨

//이름규칙7번: method는 소문자로 시작하는 동사 ex?print,add
//이름규칙 8번: 상수는 모두 대문자로 적어주고 
// 여러단어이면 단어사이에 _를 넣어준다.
// ex)PI, FIRST_NUMBER
// 상수란? 한번 값을 입력하면 다신 못바꾸는 공간.

//이름규칙 9번: 자바에 존재하는 35가지 예약어로는 변수명을 지어줄 수 없다.
// eclipse에서 보라색으로 뜨는 단어들은 모두 예약어니까, 그 단어들은 피하면 됨.
public class Ex01 {
	public static void main(String[] args) {
		//변수 선언하기
		//데이터타입 변수명
		//데이터타입이란, 해당 변수가 어떤 공간인지 설명하는 단어이다.
		//데이터타입에는 2가지 종류(기본형,참조형)가 있다.
		//기본형(8가지): 해당 위치에 값이 곧장 들어간다.
		//byte short int long float double char boolean
		//참조형(3가지): 해당 위치에 값이 존재하는 주소값만 들어간다.
		//class interface 배열
		
		//기본
		//정수형 (소숫점이 없는 나눠지는 수): byte   short   int     long
		//							 8비트	16비트	32비트	64비트
		//						 (2의7승-1)   
		//실수형(소숫점이 존재하는 모든 숫자): float double
		//문자형(글자1개만 들어감): char
		
		// 참/거짓형: boolean
		// true/false 값만 들어갈 수 있음.
		//1비트= 0,1 한쌍
		//0000=0 0111=7 1000=-8 맨 앞자리는 +(0),-(1)값이 들어가서 

		// overflow: 최대범위에 +1을 하면 정반대로 표현가능한 최소값을
		// 출력하게 된다. ex) 7에다 +1하면 -8
		//underflow: 표현할 수 있는 최소값을 넘어서면 음의 값이 양의 값으로 바뀜.
		// ex) -8에다 -1하면 7
		
		byte myByte = 127;
		myByte = (byte)(myByte+1);//overflow
		// 자료형을 원하는 형(2가지 방법)으로 바꿔줄 수 있다.
		// implicit(암시적) vs explicit(명시적)
		
		// 암시적 형변환은 더 작은 데이터타입의 값을
		// 더 큰 공간에 넣어줄 때에는 별도의 명령어 없이도 가능하다.(오류안생기니까)
		int myInt = myByte;
		
		// 명시적 형변환은 더 큰 데이터타입의 값을
		// 더 작은 공간에 넣어줄 떄에는 명시적으로 형변환을 하도록 해야한다.
		// 명시적 형변환은 (바꿔줄 데이터타입) 을 앞에 붙여서 한다.
		myInt = 256;
		//myByte = myInt; 이러면 오류
		
		myByte = (byte)myInt;
		
		System.out.println(myByte);
	}
	
}
